// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2129.PotSwitchWiperSample.subsystems;

import org.usfirst.frc2129.PotSwitchWiperSample.RobotMap;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class PIDWiper extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	Preferences preferences;
	private double safeMotorSpeed;
	private double potValueAtLeftSwitch;
	private double potValueAtRightSwitch;
	public final double offsetFromSwitch = 0.04;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogPotentiometer wiperPot = RobotMap.pIDWiperWiperPot;
    private final SpeedController wiperMotorController = RobotMap.pIDWiperWiperMotorController;
    //private final PIDController wiperPIDController = RobotMap.pIDWiperWiperPIDController;
    private final DigitalInput leftLimitSwitch = RobotMap.pIDWiperLeftLimitSwitch;
    private final DigitalInput rightLimitSwitch = RobotMap.pIDWiperRightLimitSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public PIDWiper() {
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("PIDWiper", 0.255, 0.0, 0.0);
        setAbsoluteTolerance(0.02);
        getPIDController().setContinuous(false);
        getPIDController().setOutputRange(-1.0, 1.0);
        LiveWindow.addActuator("PIDWiper", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        preferences = Preferences.getInstance();
    	
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return wiperPot.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        wiperMotorController.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    // I want the switches to be false when Open (off) and true when Closed (pressed) 
	public boolean getLeftLimitSwitchStatus()
    {
    	return !leftLimitSwitch.get();
    }
    
    public boolean getRightLimitSwitchStatus()
    {
    	return !rightLimitSwitch.get();
    }
    
    public double getAnglePotValue()
    {
    	return wiperPot.get();
    }
    
	public void updateSmartdashboard() {
    	// Send the raw sensor output to the smartdashboard
		SmartDashboard.putBoolean("Left Limit Switch", getLeftLimitSwitchStatus());
    	SmartDashboard.putBoolean("Right Limit Switch",getRightLimitSwitchStatus());
    	SmartDashboard.putNumber("Wiper Potentiometer",getAnglePotValue());
    	
    	// Update my local values from the Preferences
    	safeMotorSpeed = preferences.getDouble("MotorSpeed", 0.3);
    	potValueAtLeftSwitch = preferences.getDouble("potValueAtLeftSwitch", 0);
    	potValueAtRightSwitch = preferences.getDouble("potValueAtRightSwitch", 0);
	}
	
	public void setPositionCalibrationValues( double lPotValueAtLeftSwitch, double lPotValueAtRightSwitch )
	{
		preferences.putDouble( "potValueAtLeftSwitch", lPotValueAtLeftSwitch + offsetFromSwitch  );
		preferences.putDouble( "potValueAtRightSwitch", lPotValueAtRightSwitch - offsetFromSwitch  );
	}

	public boolean swingLeftAtSafeDefaultSpeedForCalibration()
	{
		disable();
		if (!getLeftLimitSwitchStatus())
		{
			wiperMotorController.set( 0 - safeMotorSpeed);
			return true;
		}
		
		return false;
	}
	
	public boolean swingRightAtSafeDefaultSpeedForCalibration()
	{
		disable();
		if (!getRightLimitSwitchStatus())
		{
			wiperMotorController.set( safeMotorSpeed);
			return true;
		}
		return false;
	}
	
	public void stopMotorForCalibration()
	{
		disable();
		wiperMotorController.set(0);
	}
	
	public boolean startPIDSwingLeft()
	{
		if (!getLeftLimitSwitchStatus())
		{
			initPID();
			setSetpoint(potValueAtLeftSwitch);
			this.enable();
			return true;
		}
		
		return false;
	}
	
	public boolean startPIDSwingRight()
	{
		if (!getRightLimitSwitchStatus())
		{
			initPID();
			setSetpoint(potValueAtRightSwitch);
			this.enable();
			return true;
		}
		
		return false;
	}
	
	private void initPID() {
		setInputRange(potValueAtLeftSwitch - offsetFromSwitch, potValueAtRightSwitch + offsetFromSwitch);
		setOutputRange(-0.5, 0.5);
	}

	public void stopPIDSwing()
	{
		this.disable();
		this.wiperMotorController.stopMotor();
		this.wiperMotorController.set(0);
	}
	
	public double getPotValueAtRightSwitch()
	{
		return potValueAtRightSwitch;
	}
	
	public double getPotValueAtLeftSwitch()
	{
		return potValueAtLeftSwitch;
	}
}
