// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2129.PotSwitchWiperSample.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2129.PotSwitchWiperSample.Robot;

/**
 *
 */
public class CommandCalibrateWiper extends Command {

	enum CalibrationSteps
	{
		NotStarted
		, SwipeLeft
		, SwipeRight
		, Finished
	} 
	
	private CalibrationSteps calibrationStep;
	private double leftSetpoint = 0;
	private double rightSetpoint = 0;
		
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CommandCalibrateWiper() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pIDWiper);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	calibrationStep = CalibrationSteps.NotStarted;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	switch (calibrationStep)
    	{
    	case NotStarted :
    		Robot.pIDWiper.swingLeftAtSafeDefaultSpeedForCalibration();
    		
    		calibrationStep = CalibrationSteps.SwipeLeft;
    		break;
    	case SwipeLeft :
    		if (checkForLeftSwipeCompletion())
    		{
    			Robot.pIDWiper.stopMotorForCalibration();
    			leftSetpoint = Robot.pIDWiper.getAnglePotValue();
    			Robot.pIDWiper.swingRightAtSafeDefaultSpeedForCalibration();
    			calibrationStep = CalibrationSteps.SwipeRight;
    		}
    		break;
    	case SwipeRight :
    		if (checkForRightSwipeCompletion())
    		{
    			Robot.pIDWiper.stopMotorForCalibration();
    			rightSetpoint = Robot.pIDWiper.getAnglePotValue();
    			Robot.pIDWiper.setPositionCalibrationValues(leftSetpoint, rightSetpoint);
    			calibrationStep = CalibrationSteps.Finished;
    		}
    		break;
    	case Finished :
    		
    		break;
    	}
    }

    private boolean checkForRightSwipeCompletion() {
		return Robot.pIDWiper.getRightLimitSwitchStatus();
	}

	private boolean checkForLeftSwipeCompletion() {
		// TODO Auto-generated method stub
		return Robot.pIDWiper.getLeftLimitSwitchStatus();
	}

	// Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return calibrationStep == CalibrationSteps.Finished;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.pIDWiper.stopMotorForCalibration();
    	calibrationStep = CalibrationSteps.Finished;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.pIDWiper.stopMotorForCalibration();
    	calibrationStep = CalibrationSteps.NotStarted;
    }
}
