// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2129.PotSwitchWiperSample.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2129.PotSwitchWiperSample.Robot;

/**
 *
 */
public class CommandWipeWindow extends Command {

	enum WipeDirection
	{
		left, right
	};
	
	private WipeDirection direction;
	private Boolean started;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CommandWipeWindow() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pIDWiper);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    private WipeDirection CheckInitialDirection()
    {
    	double potValue = Robot.pIDWiper.getAnglePotValue();
    	double onLeft = potValue - Robot.pIDWiper.getPotValueAtLeftSwitch();
    	double onRight = Robot.pIDWiper.getPotValueAtRightSwitch() - potValue;
    	if (onLeft >= onRight)
    	{
    		return WipeDirection.left;
    	}
    	else
    	{
    		return WipeDirection.right;
    	}
    }
    
    private WipeDirection CheckDirection( WipeDirection currentDirection)
    {
    	// If we're on Target, then swap the direction.  Otherwise carry on
    	if (Robot.pIDWiper.onTarget())
    	{
    		if (currentDirection == WipeDirection.left)
    		{
    			return WipeDirection.right;
    		}
    		
    		return WipeDirection.left;
    	}
    	
    	return currentDirection;
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
    	direction = CheckInitialDirection();
    	started = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	if (started == false)
    	{
    		wipe(direction);
    		started = true;
    		return;
    	}
    	
    	WipeDirection newDirection = CheckDirection(direction);
    	
    	if (newDirection != direction)
    	{
    		wipe(newDirection);
    		direction = newDirection;
    	}
    }

    private void wipe( WipeDirection newDirection )
    {
		if (newDirection == WipeDirection.left)
		{
			Robot.pIDWiper.startPIDSwingLeft();
		}
		else
		{
			Robot.pIDWiper.startPIDSwingRight();
		}
    	
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.pIDWiper.stopPIDSwing();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.pIDWiper.stopPIDSwing();
    }
}
